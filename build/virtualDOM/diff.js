"use strict";
const vElement_1 = require("./vElement");
const listDiff = require("list-diff2");
(function (DiffType) {
    DiffType[DiffType["REPLACE"] = 0] = "REPLACE";
    DiffType[DiffType["REORDER"] = 1] = "REORDER";
    DiffType[DiffType["PROPS"] = 2] = "PROPS";
    DiffType[DiffType["TEXT"] = 3] = "TEXT";
})(exports.DiffType || (exports.DiffType = {}));
var DiffType = exports.DiffType;
function diff(oldTree, newTree) {
    let index = 0;
    let patches = new Map();
    dfsWalk(oldTree, newTree, index, patches);
    return patches;
}
exports.diff = diff;
function dfsWalk(oldNode, newNode, index, patches) {
    let currentPatch = [];
    if (newNode === null) {
    }
    else if (typeof oldNode == "string" && typeof newNode == "string") {
        if (newNode !== oldNode) {
            currentPatch.push({
                type: DiffType.TEXT,
                content: newNode,
            });
        }
    }
    else if ((oldNode instanceof vElement_1.VElement && newNode instanceof vElement_1.VElement) &&
        oldNode.tagName === newNode.tagName) {
        let propsPatches = diffProps(oldNode, newNode);
        if (propsPatches !== null)
            if (Object.keys(propsPatches).length > 0)
                currentPatch.push({
                    type: DiffType.PROPS,
                    props: propsPatches,
                });
        diffChildren(oldNode.children, newNode.children, index, patches, currentPatch);
    }
    else {
        patches.get(index).push({
            type: DiffType.REPLACE,
            node: newNode,
        });
    }
    if (currentPatch.length > 0)
        patches.set(index, currentPatch);
}
function diffChildren(oldChildren, newChildren, index, patches, currentPatch) {
    let diffs = listDiff(oldChildren, newChildren, "key");
    newChildren = diffs.children;
    if (diffs.moves.length > 0) {
        let reorderPatch = {
            type: DiffType.REORDER,
            moves: diffs.moves
        };
        currentPatch.push(reorderPatch);
    }
    let leftNode = null;
    let currentNodeIndex = index;
    oldChildren.forEach((child, i) => {
        let newChild = newChildren[i];
        currentNodeIndex = (leftNode && leftNode.count)
            ? currentNodeIndex + leftNode.count + 1
            : currentNodeIndex + 1;
        dfsWalk(child, newChild, currentNodeIndex, patches);
        leftNode = child;
    });
}
function diffProps(oldNode, newNode) {
    let count = 0;
    let oldProps = oldNode.props;
    let newProps = newNode.props;
    let key, value;
    let propsPatches = new Map();
    oldProps.forEach((value, key) => {
        if (newProps.get(key) !== value) {
            count++;
            propsPatches.set(key, newProps.get(key));
        }
    });
    newProps.forEach((value, key) => {
        if (!oldProps.has(key)) {
            count++;
            propsPatches.set(key, newProps.get(key));
        }
    });
    if (count === 0)
        return null;
    return propsPatches;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92aXJ0dWFsRE9NL2RpZmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUlBLDJCQUF1QixZQUN2QixDQUFDLENBRGtDO0FBQ25DLE1BQU8sUUFBUSxXQUFXLFlBQVksQ0FBQyxDQUFBO0FBR3ZDLFdBQVksUUFBUTtJQUNoQiw2Q0FBTyxDQUFBO0lBQ1AsNkNBQU8sQ0FBQTtJQUNQLHlDQUFLLENBQUE7SUFDTCx1Q0FBSSxDQUFBO0FBQ1IsQ0FBQyxFQUxXLGdCQUFRLEtBQVIsZ0JBQVEsUUFLbkI7QUFMRCxJQUFZLFFBQVEsR0FBUixnQkFLWCxDQUFBO0FBVUQsY0FBcUIsT0FBa0IsRUFBRSxPQUFrQjtJQUN2RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLE9BQU8sR0FBOEIsSUFBSSxHQUFHLEVBQXdCLENBQUM7SUFDekUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUxlLFlBQUksT0FLbkIsQ0FBQTtBQUVELGlCQUFpQixPQUEwQixFQUFFLE9BQTBCLEVBQ25FLEtBQWEsRUFBRSxPQUFrQztJQUVqRCxJQUFJLFlBQVksR0FBaUIsRUFBRSxDQUFDO0lBR3BDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXZCLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLElBQUksUUFBUSxJQUFJLE9BQU8sT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbEUsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdEIsWUFBWSxDQUFDLElBQUksQ0FBQztnQkFDZCxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7Z0JBQ25CLE9BQU8sRUFBRSxPQUFPO2FBQ25CLENBQUMsQ0FBQTtRQUNOLENB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LENBQUMsS0FBSyxFQUFFLEdBQUc7UUFDeEIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEtBQUssRUFBRSxDQUFDO1lBQ1IsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUMsR0FBRztRQUN2QixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLEtBQUssRUFBRSxDQUFDO1lBQ1IsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDO0lBRWhCLE1BQU0sQ0FBQyxZQUFZLENBQUM7QUFDeEIsQ0FBQyIsImZpbGUiOiJ2aXJ0dWFsRE9NL2RpZmYuanMiLCJzb3VyY2VSb290Ijoic3JjLyJ9
