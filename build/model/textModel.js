"use strict";
const StringBuffer_1 = require("../util/StringBuffer");
const LineModel_1 = require("./LineModel");
const events_1 = require("events");
(function (TextEditType) {
    TextEditType[TextEditType["InsertText"] = 0] = "InsertText";
    TextEditType[TextEditType["DeleteText"] = 1] = "DeleteText";
})(exports.TextEditType || (exports.TextEditType = {}));
var TextEditType = exports.TextEditType;
class TextEdit {
    constructor(_type, _range) {
        this._type = _type;
        this._range = _range;
    }
    get type() {
        return this._type;
    }
    get range() {
        return this._range;
    }
}
exports.TextEdit = TextEdit;
class TextChangedEvent extends Event {
    constructor(_type, _begin_pos, _end_pos, content) {
        super("textChanged");
        this._type = _type;
        if (this._type === TextEditType.InsertText || this._type === TextEditType.DeleteText) {
            this._begin_pos = _begin_pos;
            this._end_pos = _end_pos;
            this._content = content;
        }
        else {
            this._begin_pos = _begin_pos;
            this._end_pos = _end_pos;
        }
    }
    get beginPosition() {
        return this._begin_pos;
    }
    get endPostition() {
        return this._end_pos;
    }
    get content() {
        return this._content;
    }
    get changedType() {
        return this._type;
    }
}
exports.TextChangedEvent = TextChangedEvent;
class TextModel extends events_1.EventEmitter {
    constructor() {
        super();
    }
    setFromRawText(_string) {
        this._lines = new Array();
        let lc = 1;
        var buf = new StringBuffer_1.StringBuffer();
        var lines = this.toLines(_string);
        for (let i = 0; i < lines.length; i++) {
            var lm = new LineModel_1.LineModel(lc, lines[i]);
            this._lines[lc++] = lm;
        }
        this._lineCount = lc;
    }
    lineAt(num) {
        return this._lines[num];
    }
    insertText(pos, _content) {
        var lines = this.toLines(_content);
        if (lines.length > 0) {
            var firstLineStr = lines[0];
            var firstLineLm = this._lines[pos.line];
            firstLineLm.insert(pos.offset, firstLineStr);
            var extendLineCount = lines.length - 1;
            for (let i = this.linesCount + extendLineCount; i > pos.line + extendLineCount; i++) {
                this._lines[i] = this._lines[i - extendLineCount];
                this._lines[i].number = i;
            }
            for (let i = 1; i < lines.length; i++) {
                this._lines[pos.line + i] = new LineModel_1.LineModel(pos.line + i, lines[i]);
            }
            this.emit("intertText", new TextChangedEvent(TextEditType.InsertText, pos, null, _content));
        }
    }
    deleteText(_range) {
        if (_range.begin.line === _range.end.line) {
            this._lines[_range.begin.line].delete(_range.begin.offset, _range.end.offset);
        }
        else if (_range.begin.line > _range.end.line) {
            this._lines[_range.begin.line].deleteToEnd(_range.begin.offset);
            var suffixStr = this._lines[_range.end.line].text.slice(_range.end.offset);
            var shrinkLinesCount = _range.end.line - _range.begin.line;
            for (let i = _range.begin.line + 1; i < this._lines.length - shrinkLinesCount; i++) {
                this._lines[i] = this._lines[i + shrinkLinesCount];
                this._lines[i].number = i;
            }
            this._lines.length -= shrinkLinesCount;
            this._lines[_range.begin.line].append(suffixStr);
        }
        else {
            throw new Error("Illegal data.");
        }
    }
    getLineFromNum(_line_num) {
        return this._lines[_line_num];
    }
    charAt(pos) {
        return this._lines[pos.line].charAt(pos.offset);
    }
    reportAll() {
        var buf = new StringBuffer_1.StringBuffer();
        for (let i = 1; i < this._lines.length; i++) {
            buf.push(this._lines[i].report());
        }
        return buf.getStr();
    }
    report(_range) {
        var buf = new StringBuffer_1.StringBuffer();
        buf.push(this._lines[_range.begin.line].text.slice(_range.begin.offset, _range.end.offset));
        for (let i = _range.begin.line + 1; i < _range.end.line - 1; i++) {
            buf.push(this._lines[i].text);
        }
        if (_range.end.line > _range.begin.line) {
            buf.push(this._lines[_range.end.line].text.slice(0, _range.end.offset));
        }
        return buf.getStr();
    }
    get linesCount() {
        return this._lineCount - 1;
    }
    toLines(content) {
        var lines = new Array();
        var buf = new StringBuffer_1.StringBuffer();
        if (content.length == 0) {
            lines.push("");
        }
        else {
            for (let i = 0; i < content.length; ++i) {
                if (content[i] === '\n') {
                    if (content[i + 1] === '\r') {
                        ++i;
                    }
                    lines.push(buf.getStr());
                    buf = new StringBuffer_1.StringBuffer();
                }
                else if (content[i] === '\r') {
                    if (content[i + 1] == '\n') {
                        ++i;
                    }
                    lines.push(buf.getStr());
                    buf = new StringBuffer_1.StringBuffer();
                }
                else {
                    buf.push(content.charAt(i));
                }
            }
            if (buf.length > 0) {
                lines.push(buf.getStr() + '\n');
                buf = null;
            }
        }
        return lines;
    }
}
exports.TextModel = TextModel;
function* TextModelLineIterator(tm) {
    var lm = tm.linesCount;
    for (let i = 1; i <= lm; ++i) {
        yield tm.getLineFromNum(i);
    }
}
exports.TextModelLineIterator = TextModelLineIterator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
