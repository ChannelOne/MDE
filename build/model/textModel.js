"use strict";
const StringBuffer_1 = require("../util/StringBuffer");
const text_1 = require("../util/text");
const LineModel_1 = require("./LineModel");
const events_1 = require("events");
const _1 = require(".");
const fn_1 = require("../util/fn");
function isEndOfLineBreaker(str) {
    return str[str.length - 1] == "\n";
}
class TextEditEvent {
    constructor(textEdit) {
        this._textEdit = textEdit;
    }
    get textEdit() {
        return this._textEdit;
    }
}
exports.TextEditEvent = TextEditEvent;
class TextModel extends events_1.EventEmitter {
    constructor(_string) {
        super();
        this._lines = new Array();
        let lc = 1;
        var buf = new StringBuffer_1.StringBuffer();
        var lines = text_1.parseTextToLines(_string);
        this._lines.length = lc;
        for (let i = 0; i < lines.length; i++) {
            var lm = new LineModel_1.LineModel(lc, lines[i]);
            this._lines[lc++] = lm;
        }
    }
    positionAt(offset) {
        let currentLine = 1;
        let remainOffset = offset;
        while (remainOffset >= this._lines[currentLine].length) {
            remainOffset -= this._lines[currentLine].length;
            currentLine++;
            if (currentLine > this.linesCount)
                throw new Error("Illegal data input.");
        }
        return {
            line: currentLine,
            offset: remainOffset,
        };
    }
    offsetAt(pos) {
        if (pos.line === 1 && this.linesCount >= 1) {
            if (pos.offset < this._lines[1].length)
                return pos.offset;
        }
        else if (pos.line > 1 && pos.line <= this.linesCount
            && pos.offset < this._lines[pos.line].length) {
            let count = 0;
            for (let i = 1; i < pos.line; i++) {
                count += this._lines[i].length;
            }
            count += pos.offset;
            return count;
        }
        throw new Error("Illegal data input.");
    }
    lineAt(num) {
        if (num <= 0 || num > this.linesCount)
            throw new Error("<Index out of range> line:" + num + " LinesCount:" + this.linesCount);
        return this._lines[num];
    }
    get firstLine() {
        if (this._lines.length === 0)
            throw new Error("No lines found.");
        return this._lines[0];
    }
    get lastLine() {
        if (this._lines.length === 0)
            throw new Error("No lines found.");
        return this._lines[this._lines.length - 1];
    }
    applyCancellableTextEdit(textEdit) {
        let _pos;
        let _reverse;
        switch (textEdit.type) {
            case _1.TextEditType.InsertText:
                {
                    if (textEdit.lines.length === 1) {
                        _reverse = new _1.TextEdit(_1.TextEditType.DeleteText, {
                            begin: _1.PositionUtil.clonePosition(textEdit.position),
                            end: {
                                line: textEdit.position.line,
                                offset: textEdit.position.offset + textEdit.lines[0].length
                            }
                        });
                    }
                    else {
                        _reverse = new _1.TextEdit(_1.TextEditType.DeleteText, {
                            begin: _1.PositionUtil.clonePosition(textEdit.position),
                            end: {
                                line: textEdit.position.line + textEdit.lines.length - 1,
                                offset: fn_1.last(textEdit.lines).length,
                            }
                        });
                    }
                    _pos = this.insertText(textEdit);
                    break;
                }
            case _1.TextEditType.DeleteText:
                {
                    let lostPart = this.report(textEdit.range);
                    _reverse = new _1.TextEdit(_1.TextEditType.InsertText, _1.PositionUtil.clonePosition(textEdit.range.begin), lostPart);
                    _pos = this.deleteText(textEdit);
                    break;
                }
            case _1.TextEditType.ReplaceText:
                {
                    let lostPart = this.report(textEdit.range), beginPos = _1.PositionUtil.clonePosition(textEdit.range.begin), replacedPos = this.replaceText(textEdit);
                    _reverse = new _1.TextEdit(_1.TextEditType.ReplaceText, {
                        begin: beginPos,
                        end: replacedPos,
                    }, lostPart);
                    _pos = replacedPos;
                    break;
                }
        }
        return {
            reverse: _reverse,
            pos: _pos,
        };
    }
    applyTextEdit(textEdit) {
        let pos;
        switch (textEdit.type) {
            case _1.TextEditType.InsertText:
                pos = this.insertText(textEdit);
                break;
            case _1.TextEditType.DeleteText:
                pos = this.deleteText(textEdit);
                break;
            case _1.TextEditType.ReplaceText:
                pos = this.replaceText(textEdit);
                break;
        }
        if (!pos)
            throw new Error("Unknown textEdit error.");
        let evt = new TextEditEvent(textEdit);
        this.emit("textEdit", evt);
        return pos;
    }
    insertText(textEdit) {
        let pos;
        if (textEdit.position)
            pos = textEdit.position;
        else
            pos = textEdit.range.begin;
        if (textEdit.text.length === 0) {
            return _1.PositionUtil.clonePosition(pos);
        }
        let lines = textEdit.lines;
        if (pos.line <= 0 || pos.line > this.linesCount)
            throw new Error("data illegal when inserting text to TextModel. Line: #" + pos.line);
        let linesHead = fn_1.hd(lines);
        let linesTail = fn_1.tl(lines);
        if (linesTail.length === 0) {
            this._lines[pos.line].insert(pos.offset, linesHead);
            return {
                line: pos.line,
                offset: pos.offset + linesHead.length,
            };
        }
        else {
            let prefix = this._lines[pos.line].text.slice(0, pos.offset);
            let postfix = this._lines[pos.line].text.slice(pos.offset);
            this._lines[pos.line] = new LineModel_1.LineModel(pos.line, prefix + linesHead);
            if (pos.line === this.linesCount) {
                let linesCount = this.linesCount + 1;
                let lineModels = [];
                linesTail.forEach((lineStr) => {
                    lineModels.push(new LineModel_1.LineModel(linesCount++, lineStr));
                });
                this._lines = this._lines.concat(lineModels);
                let lastLineModel = this._lines[linesCount - 1];
                lastLineModel.insert(lastLineModel.length, postfix);
            }
            else {
                let suffixLines = this._lines.slice(0, pos.line + 1);
                let postfixLines = this._lines.slice(pos.line + 1);
                let lineModels = [];
                let lineCounter = pos.line + 1;
                linesTail.forEach((lineStr) => {
                    lineModels.push(new LineModel_1.LineModel(lineCounter++, lineStr));
                });
                this._lines = suffixLines.concat(lineModels).concat(postfixLines);
                let insertLineModel = this._lines[lineCounter - 1];
                insertLineModel.insert(insertLineModel.length, postfix);
                for (let i = lineCounter; i <= this.linesCount; i++) {
                    this._lines[i].number = i;
                }
            }
            return {
                line: pos.line + lines.length - 1,
                offset: lines[lines.length - 1].length,
            };
        }
    }
    deleteText(textEdit) {
        let _range = textEdit.range;
        if (_range.begin.line === _range.end.line) {
            this._lines[_range.begin.line].delete(_range.begin.offset, _range.end.offset);
            return _1.PositionUtil.clonePosition(_range.begin);
        }
        else if (_range.begin.line < _range.end.line) {
            let remain = this._lines[_range.end.line].text.slice(_range.end.offset);
            let oldLineModel = this._lines[_range.begin.line];
            this._lines[_range.begin.line] = new LineModel_1.LineModel(_range.begin.line, oldLineModel.text.slice(0, _range.begin.offset) + remain);
            oldLineModel = null;
            let suffix = this._lines.slice(0, _range.begin.line + 1);
            let postffix = this._lines.slice(_range.end.line + 1);
            this._lines = suffix.concat(postffix);
            return _1.PositionUtil.clonePosition(_range.begin);
        }
        throw new Error("Illegal data.");
    }
    replaceText(textEdit) {
        let _range = textEdit.range, _text = textEdit.text;
        if (_range.end.line > _range.begin.line ||
            (_range.end.line === _range.begin.line && _range.end.offset >= _range.begin.offset)) {
            this.deleteText(textEdit);
            return this.insertText(textEdit);
        }
        else {
            throw new Error("Range is illegal.");
        }
    }
    getLineFromNum(_line_num) {
        return this._lines[_line_num];
    }
    charAt(pos) {
        return this._lines[pos.line].charAt(pos.offset);
    }
    reportAll() {
        var buf = new StringBuffer_1.StringBuffer();
        for (let i = 1; i < this._lines.length; i++) {
            buf.push(this._lines[i].report());
        }
        return buf.getStr();
    }
    report(_range) {
        var buf = new StringBuffer_1.StringBuffer();
        if (_range.begin.line === _range.end.line) {
            buf.push(this._lines[_range.begin.line].text.slice(_range.begin.offset, _range.end.offset));
        }
        else {
            buf.push(this._lines[_range.begin.line].text.slice(_range.begin.offset));
            for (let i = _range.begin.line + 1; i < _range.end.line; i++) {
                buf.push(this._lines[i].text);
            }
            buf.push(this._lines[_range.end.line].text.slice(0, _range.end.offset));
        }
        return buf.getStr();
    }
    forEach(_fun) {
        for (let i = 1; i <= this.linesCount; i++) {
            _fun(this._lines[i]);
        }
    }
    get linesCount() {
        return this._lines.length - 1;
    }
}
exports.TextModel = TextModel;
function* TextModelLineIterator(tm) {
    var lm = tm.linesCount;
    for (let i = 1; i <= lm; ++i) {
        yield tm.getLineFromNum(i);
    }
}
exports.TextModelLineIterator = TextModelLineIterator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
