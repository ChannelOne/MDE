"use strict";
const StringBuffer_1 = require("../util/StringBuffer");
const LineModel_1 = require("./LineModel");
const events_1 = require("events");
(function (TextChangedType) {
    TextChangedType[TextChangedType["InsertText"] = 0] = "InsertText";
    TextChangedType[TextChangedType["DeleteText"] = 1] = "DeleteText";
})(exports.TextChangedType || (exports.TextChangedType = {}));
var TextChangedType = exports.TextChangedType;
class TextChangedEvent extends Event {
    constructor(_type, _begin_pos, _end_pos, content) {
        super("textChanged");
        this._type = _type;
        if (this._type === TextChangedType.InsertText || this._type === TextChangedType.DeleteText) {
            this._begin_pos = _begin_pos;
            this._end_pos = _end_pos;
            this._content = content;
        }
        else {
            this._begin_pos = _begin_pos;
            this._end_pos = _end_pos;
        }
    }
    get beginPosition() {
        return this._begin_pos;
    }
    get endPostition() {
        return this._end_pos;
    }
    get content() {
        return this._content;
    }
    get changedType() {
        return this._type;
    }
}
exports.TextChangedEvent = TextChangedEvent;
class TextModel extends events_1.EventEmitter {
    constructor() {
        super();
    }
    setFromRawText(_string) {
        this._lines = new Array();
        let lc = 1;
        var buf = new StringBuffer_1.StringBuffer();
        var lines = this.toLines(_string);
        for (let i = 0; i < lines.length; i++) {
            var lm = new LineModel_1.LineModel(lc, lines[i]);
            this._lines[lc++] = lm;
        }
        this._lineCount = lc;
    }
    insertText(pos, _content) {
        var lines = this.toLines(_content);
        if (lines.length > 0) {
            var firstLineStr = lines[0];
            var firstLineLm = this._lines[pos.line];
            firstLineLm.insert(pos.offset, firstLineStr);
            var extendLineCount = lines.length - 1;
            for (let i = this.linesCount + extendLineCount; i > pos.line + extendLineCount; i++) {
                this._lines[i] = this._lines[i - extendLineCount];
                this._lines[i].number = i;
            }
            for (let i = 1; i < lines.length; i++) {
                this._lines[pos.line + i] = new LineModel_1.LineModel(pos.line + i, lines[i]);
            }
            this.emit("intertText", new TextChangedEvent(TextChangedType.InsertText, pos, null, _content));
        }
    }
    deleteText(_begin_pos, _end_pos) {
        if (_begin_pos.line === _end_pos.line) {
            this._lines[_begin_pos.line].delete(_begin_pos.offset, _end_pos.offset);
        }
        else if (_begin_pos.line > _end_pos.line) {
            this._lines[_begin_pos.line].deleteToEnd(_begin_pos.offset);
            var suffixStr = this._lines[_end_pos.line].text.slice(_end_pos.offset);
            var shrinkLinesCount = _end_pos.line - _begin_pos.line;
            for (let i = _begin_pos.line + 1; i < this._lines.length - shrinkLinesCount; i++) {
                this._lines[i] = this._lines[i + shrinkLinesCount];
                this._lines[i].number = i;
            }
            this._lines.length -= shrinkLinesCount;
            this._lines[_begin_pos.line].append(suffixStr);
        }
        else {
            throw new Error("Illegal data.");
        }
    }
    getLineFromNum(_line_num) {
        return this._lines[_line_num];
    }
    charAt(pos) {
        return this._lines[pos.line].charAt(pos.offset);
    }
    reportAll() {
        var buf = new StringBuffer_1.StringBuffer();
        for (let i = 1; i < this._lines.length; i++) {
            buf.push(this._lines[i].report());
        }
        return buf.getStr();
    }
    report(_begin_pos, _end_pos) {
        var buf = new StringBuffer_1.StringBuffer();
        buf.push(this._lines[_begin_pos.line].text.slice(_begin_pos.offset, _end_pos.offset));
        for (let i = _begin_pos.line + 1; i < _end_pos.line - 1; i++) {
            buf.push(this._lines[i].text);
        }
        if (_end_pos.line > _begin_pos.line) {
            buf.push(this._lines[_end_pos.line].text.slice(0, _end_pos.offset));
        }
        return buf.getStr();
    }
    get linesCount() {
        return this._lineCount - 1;
    }
    toLines(content) {
        var lines = new Array();
        var buf = new StringBuffer_1.StringBuffer();
        if (content.length == 0) {
            lines.push("");
        }
        else {
            for (let i = 0; i < content.length; ++i) {
                if (content[i] === '\n') {
                    if (content[i + 1] === '\r') {
                        ++i;
                    }
                    lines.push(buf.getStr());
                    buf = new StringBuffer_1.StringBuffer();
                }
                else if (content[i] === '\r') {
                    if (content[i + 1] == '\n') {
                        ++i;
                    }
                    lines.push(buf.getStr());
                    buf = new StringBuffer_1.StringBuffer();
                }
                else {
                    buf.push(content.charAt(i));
                }
            }
            if (buf.length > 0) {
                lines.push(buf.getStr() + '\n');
                buf = null;
            }
        }
        return lines;
    }
}
exports.TextModel = TextModel;
function* TextModelLineIterator(tm) {
    var lm = tm.linesCount;
    for (let i = 1; i <= lm; ++i) {
        yield tm.getLineFromNum(i);
    }
}
exports.TextModelLineIterator = TextModelLineIterator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
