"use strict";
const StringBuffer_1 = require("../util/StringBuffer");
const LineModel_1 = require("./LineModel");
const events_1 = require("events");
(function (TextChangedType) {
    TextChangedType[TextChangedType["InsertText"] = 0] = "InsertText";
    TextChangedType[TextChangedType["DeleteText"] = 1] = "DeleteText";
    TextChangedType[TextChangedType["InsertLine"] = 2] = "InsertLine";
    TextChangedType[TextChangedType["DeleteLine"] = 3] = "DeleteLine";
})(exports.TextChangedType || (exports.TextChangedType = {}));
var TextChangedType = exports.TextChangedType;
class TextChangedEvent extends Event {
    constructor(_type, _number, _start, _end) {
        super("textChanged");
        this._lineNumber = 0;
        this._count = 0;
        this._startOffset = 0;
        this._endOffset = 0;
        this._type = _type;
        if (this._type === TextChangedType.InsertText || this._type === TextChangedType.DeleteText) {
            this._lineNumber;
            this._startOffset = _start;
            this._endOffset = _end;
        }
        else {
            this._lineNumber = _number;
            this._count = _start;
        }
    }
    get lineNumber() {
        return this._lineNumber;
    }
    get count() {
        return this._count;
    }
    get startOffset() {
        return this._startOffset;
    }
    get endOffset() {
        return this._endOffset;
    }
    get changedType() {
        return this._type;
    }
}
exports.TextChangedEvent = TextChangedEvent;
class TextModel extends events_1.EventEmitter {
    constructor() {
        super();
    }
    setFromRawText(_string) {
        this._lines = new Array();
        let lc = 1;
        var buf = new StringBuffer_1.StringBuffer();
        for (let i = 0; i < _string.length; ++i) {
            if (_string[i] === '\n') {
                if (_string[i + 1] === '\r') {
                    ++i;
                }
                var li = new LineModel_1.LineModel(lc, buf.getStr());
                this._lines[lc++] = li;
                buf = new StringBuffer_1.StringBuffer();
            }
            else if (_string[i] === '\r') {
                if (_string[i + 1] == '\n') {
                    ++i;
                }
                var li = new LineModel_1.LineModel(lc, buf.getStr());
                this._lines[lc++] = li;
                buf = new StringBuffer_1.StringBuffer();
            }
            else {
                buf.push(_string.charAt(i));
            }
        }
        if (buf.length > 0) {
            var li = new LineModel_1.LineModel(lc++, buf.getStr());
            this._lines.push(li);
            buf = null;
        }
        this._lineCount = lc;
    }
    insertText(_line, _offset, _content) {
        this._lines[_line].insert(_offset, _content);
        this.emit("insertText", new TextChangedEvent(TextChangedType.InsertText, _line, _offset, _offset + _content.length));
    }
    deleteText(_line, _begin, _end) {
        this._lines[_line].delete(_begin, _end);
        this.emit("deleteText", new TextChangedEvent(TextChangedType.DeleteText, _line, _begin, _end));
    }
    insertLine(_index, _num) {
        let old_length = this.linesCount;
        let _count = _num | 1;
        for (let i = old_length + _count; i > _index; ++i) {
            this._lines[i] = this._lines[i - _count];
            this._lines[i].number = i + _count;
        }
        this._lineCount += _count;
        for (let i = 0; i < _count; i++) {
            this._lines[_index + i] = new LineModel_1.LineModel(_index, "");
        }
        this.emit("insertLine", new TextChangedEvent(TextChangedType.InsertLine, _index, _count));
    }
    deleteLine(_index, _num) {
        let old_length = this.linesCount;
        let count = _num | 1;
        for (let i = _index; i < old_length - count; ++i) {
            this._lines[i] = this._lines[i + count];
            this._lines[i].number = i;
        }
        this._lineCount -= count;
        this._lines.pop();
        this.emit("deleteLine", new TextChangedEvent(TextChangedType.DeleteLine, _index, count));
    }
    setLineValue(_line_num, lm) {
        this._lines[_line_num] = lm;
    }
    getLineFromNum(_line_num) {
        return this._lines[_line_num];
    }
    get linesCount() {
        return this._lineCount;
    }
}
exports.TextModel = TextModel;
function* TextModelLineIterator(tm) {
    var lm = tm.linesCount;
    for (let i = 1; i <= lm; ++i) {
        yield tm.getLineFromNum(i);
    }
}
exports.TextModelLineIterator = TextModelLineIterator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbC90ZXh0TW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLCtCQUEyQixzQkFDM0IsQ0FBQyxDQURnRDtBQUNqRCw0QkFBd0IsYUFDeEIsQ0FBQyxDQURvQztBQUNyQyx5QkFBMkIsUUFFM0IsQ0FBQyxDQUZrQztBQUVuQyxXQUFZLGVBQWU7SUFDdkIsaUVBQVUsQ0FBQTtJQUFFLGlFQUFVLENBQUE7SUFBRSxpRUFBVSxDQUFBO0lBQUUsaUVBQVUsQ0FBQTtBQUNsRCxDQUFDLEVBRlcsdUJBQWUsS0FBZix1QkFBZSxRQUUxQjtBQUZELElBQVksZUFBZSxHQUFmLHVCQUVYLENBQUE7QUFFRCwrQkFBc0MsS0FBSztJQVF2QyxZQUFZLEtBQXVCLEVBQUUsT0FBZ0IsRUFBRSxNQUFlLEVBQUUsSUFBYztRQUNsRixNQUFNLGFBQWEsQ0FBQyxDQUFDO1FBUGpCLGdCQUFXLEdBQVksQ0FBQyxDQUFDO1FBQ3pCLFdBQU0sR0FBWSxDQUFDLENBQUM7UUFDcEIsaUJBQVksR0FBWSxDQUFDLENBQUM7UUFDMUIsZUFBVSxHQUFZLENBQUMsQ0FBQztRQU01QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGVBQWUsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN6RixJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1lBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzNCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1lBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FB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QUMsRUFBRSxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxxQkFBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4RCxDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFRCxVQUFVLENBQUMsTUFBZSxFQUFFLElBQWM7UUFDdEMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNqQyxJQUFJLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBRXJCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsVUFBVSxHQUFHLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksZ0JBQWdCLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQsWUFBWSxDQUFDLFNBQWtCLEVBQUUsRUFBYztRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsY0FBYyxDQUFDLFNBQWtCO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDVixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0FBRUwsQ0FBQztBQTFHWSxpQkFBUyxZQTBHckIsQ0FBQTtBQUVELGdDQUF3QyxFQUFjO0lBQ2xELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUM7SUFFdkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMzQixNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztBQUNMLENBQUM7QUFOaUIsNkJBQXFCLHdCQU10QyxDQUFBIiwiZmlsZSI6Im1vZGVsL3RleHRNb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIn0=
