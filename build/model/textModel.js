"use strict";
const StringBuffer_1 = require("../util/StringBuffer");
const text_1 = require("../util/text");
const LineModel_1 = require("./LineModel");
const events_1 = require("events");
const _1 = require(".");
(function (TextEditType) {
    TextEditType[TextEditType["InsertText"] = 0] = "InsertText";
    TextEditType[TextEditType["DeleteText"] = 1] = "DeleteText";
})(exports.TextEditType || (exports.TextEditType = {}));
var TextEditType = exports.TextEditType;
class TextEdit {
    constructor(_type, _rp, _text) {
        this._type = _type;
        if (_text === undefined)
            this._text = null;
        else {
            this._text = _text;
            this._lines = text_1.parseTextToLines(_text);
        }
        if (_type == TextEditType.InsertText && _1.isPosition(_rp)) {
            this._position = _rp;
        }
        else if (_type == TextEditType.DeleteText && _1.isRange(_rp)) {
            this._range = _rp;
        }
        else
            throw new Error("Error data input");
    }
    get type() {
        return this._type;
    }
    get range() {
        return this._range;
    }
    get position() {
        return this._position;
    }
    get text() {
        return this._text;
    }
    get lines() {
        return this._lines;
    }
}
exports.TextEdit = TextEdit;
class TextChangedEvent extends Event {
    constructor(_type, _begin_pos, _end_pos, content) {
        super("textChanged");
        this._type = _type;
        if (this._type === TextEditType.InsertText || this._type === TextEditType.DeleteText) {
            this._begin_pos = _begin_pos;
            this._end_pos = _end_pos;
            this._content = content;
        }
        else {
            this._begin_pos = _begin_pos;
            this._end_pos = _end_pos;
        }
    }
    get beginPosition() {
        return this._begin_pos;
    }
    get endPostition() {
        return this._end_pos;
    }
    get content() {
        return this._content;
    }
    get changedType() {
        return this._type;
    }
}
exports.TextChangedEvent = TextChangedEvent;
class TextModel extends events_1.EventEmitter {
    constructor() {
        super();
    }
    setFromRawText(_string) {
        this._lines = new Array();
        let lc = 1;
        var buf = new StringBuffer_1.StringBuffer();
        var lines = text_1.parseTextToLines(_string);
        this._lines.length = lc;
        for (let i = 0; i < lines.length; i++) {
            var lm = new LineModel_1.LineModel(lc, lines[i]);
            this._lines[lc++] = lm;
        }
    }
    lineAt(num) {
        if (num <= 0 || num > this.linesCount)
            throw new Error("index out of range");
        return this._lines[num];
    }
    insertText(pos, _content) {
        var lines = text_1.parseTextToLines(_content);
        if (pos.line <= 0 || pos.line > this.linesCount)
            throw new Error("data illegal when inserting text to TextModel");
        if (lines.length > 0) {
            var firstLineStr = lines[0];
            var firstLineLm = this._lines[pos.line];
            firstLineLm.insert(pos.offset, firstLineStr);
            var extendLineCount = lines.length - 1;
            if (extendLineCount > 0) {
                for (let i = this.linesCount + extendLineCount; i > pos.line + extendLineCount; i--) {
                    this._lines[i] = this._lines[i - extendLineCount];
                    this._lines[i].number = i;
                }
            }
            for (let i = 1; i < lines.length; i++) {
                this._lines[pos.line + i] = new LineModel_1.LineModel(pos.line + i, lines[i]);
            }
            this.emit("intertText", new TextChangedEvent(TextEditType.InsertText, pos, null, _content));
        }
    }
    deleteText(_range) {
        if (_range.begin.line === _range.end.line) {
            this._lines[_range.begin.line].delete(_range.begin.offset, _range.end.offset);
        }
        else if (_range.begin.line < _range.end.line) {
            this._lines[_range.begin.line].deleteToEnd(_range.begin.offset);
            var suffixStr = this._lines[_range.end.line].text.slice(_range.end.offset);
            var shrinkLinesCount = _range.end.line - _range.begin.line;
            for (let i = _range.begin.line + 1; i < this._lines.length - shrinkLinesCount; i++) {
                this._lines[i] = this._lines[i + shrinkLinesCount];
                this._lines[i].number = i;
            }
            this._lines.length -= shrinkLinesCount;
            this._lines[_range.begin.line].append(suffixStr);
        }
        else {
            throw new Error("Illegal data.");
        }
    }
    getLineFromNum(_line_num) {
        return this._lines[_line_num];
    }
    charAt(pos) {
        return this._lines[pos.line].charAt(pos.offset);
    }
    reportAll() {
        var buf = new StringBuffer_1.StringBuffer();
        for (let i = 1; i < this._lines.length; i++) {
            buf.push(this._lines[i].report());
        }
        return buf.getStr();
    }
    report(_range) {
        var buf = new StringBuffer_1.StringBuffer();
        buf.push(this._lines[_range.begin.line].text.slice(_range.begin.offset, _range.end.offset));
        for (let i = _range.begin.line + 1; i < _range.end.line - 1; i++) {
            buf.push(this._lines[i].text);
        }
        if (_range.end.line > _range.begin.line) {
            buf.push(this._lines[_range.end.line].text.slice(0, _range.end.offset));
        }
        return buf.getStr();
    }
    get linesCount() {
        return this._lines.length - 1;
    }
}
exports.TextModel = TextModel;
function* TextModelLineIterator(tm) {
    var lm = tm.linesCount;
    for (let i = 1; i <= lm; ++i) {
        yield tm.getLineFromNum(i);
    }
}
exports.TextModelLineIterator = TextModelLineIterator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
