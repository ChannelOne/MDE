"use strict";
const textModel_1 = require("./textModel");
const dom_1 = require("../util/dom");
class LineModelToDOMGenerator {
    constructor(_lm) {
        this._lineModel = _lm;
    }
    generate() {
        let div = dom_1.elem("div", "editor-line", {
            "data-lineId": this._lineModel.number
        });
        let span = dom_1.elem("span");
        span.innerText = this._lineModel.text;
        div.appendChild(span);
        return div;
    }
}
exports.LineModelToDOMGenerator = LineModelToDOMGenerator;
class TextModelToDOMGenerator {
    constructor(_tm) {
        this._textModel = _tm;
    }
    generate() {
        let frame = dom_1.elem("div", "editor-frame");
        for (let i = 1; i <= this._textModel.linesCount; i++) {
            let lm = this._textModel.lineAt(i);
            let lmGen = new LineModelToDOMGenerator(lm);
            frame.appendChild(lmGen.generate());
        }
        return frame;
    }
}
exports.TextModelToDOMGenerator = TextModelToDOMGenerator;
function refreshDOM(_tm, _dom, beginLine, endLine) {
    let childList = _dom.children;
    if (endLine) {
        for (let i = beginLine; i <= endLine; i++) {
            let oldElm = childList.item(i - 1);
            let lineGen = new LineModelToDOMGenerator(_tm.lineAt(i));
            let dom = lineGen.generate();
            oldElm.parentElement.replaceChild(dom, oldElm);
        }
    }
    else {
        for (let i = beginLine; i <= _tm.linesCount; i++) {
            let oldElm = childList.item(i - 1);
            let lineGen = new LineModelToDOMGenerator(_tm.lineAt(i));
            let dom = lineGen.generate();
            oldElm.parentElement.replaceChild(dom, oldElm);
        }
        if (childList.length > _tm.linesCount) {
            for (let i = childList.length - 1; i >= _tm.linesCount; i--) {
                let elm = childList.item(i);
                elm.parentElement.removeChild(elm);
            }
        }
    }
}
exports.refreshDOM = refreshDOM;
function applyTextEditToDOM(_textEdit, _tm, _dom) {
    switch (_textEdit.type) {
        case textModel_1.TextEditType.InsertText:
            _tm.insertText(_textEdit.position, _textEdit.text);
            refreshDOM(_tm, _dom, _textEdit.position.line, _textEdit.position.line + _textEdit.lines.length - 1);
            break;
        case textModel_1.TextEditType.DeleteText:
            _tm.deleteText(_textEdit.range);
            refreshDOM(_tm, _dom, _textEdit.range.begin.line);
            break;
        default:
            throw new Error("Error text edit type.");
    }
    console.log(_tm);
}
exports.applyTextEditToDOM = applyTextEditToDOM;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbC9kb21HZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUFnRCxhQUNoRCxDQUFDLENBRDREO0FBRTdELHNCQUFtQixhQUNuQixDQUFDLENBRCtCO0FBR2hDO0lBSUksWUFBWSxHQUFjO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQzFCLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxHQUFHLEdBQUcsVUFBSSxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7WUFDakMsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTTtTQUN4QyxDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksR0FBRyxVQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztRQUV0QyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDZixDQUFDO0FBRUwsQ0FBQztBQXJCWSwrQkFBdUIsMEJBcUJuQyxDQUFBO0FBRUQ7SUFJSSxZQUFZLEdBQWM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDMUIsQ0FBQztJQUVELFFBQVE7UUFFSixJQUFJLEtBQUssR0FBRyxVQUFJLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRXhDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNuRCxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVuQyxJQUFJLEtBQUssR0FBRyxJQUFJLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEMsQ0FBQztRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFFakIsQ0FBQztBQUVMLENBQUM7QUF2QlksK0JBQXVCLDBCQXVCbkMsQ0FBQTtBQUVELG9CQUEyQixHQUFjLEVBQUUsSUFBaUIsRUFBRSxTQUFpQixFQUFFLE9BQWdCO0lBQzdGLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFFOUIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNWLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFFeEMsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFbkMsSUFBSSxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNsRCxDQUFDO0lBQ0wsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBRUosR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFFL0MsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFbkMsSUFBSSxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNsRCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUdwQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUMxRCxJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixHQUFHLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QyxDQUFDO1FBRUwsQ0FBQztJQUVMLENBQUM7QUFDTCxDQUFDO0FBbENlLGtCQUFVLGFBa0N6QixDQUFBO0FBRUQsNEJBQW1DLFNBQW1CLEVBQUUsR0FBYyxFQUFFLElBQWlCO0lBQ3JGLE1BQU0sQ0FBQSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEtBQUssd0JBQVksQ0FBQyxVQUFVO1lBQ3hCLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkQsVUFBVSxDQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQzFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzFELEtBQUssQ0FBQztRQUNWLEtBQUssd0JBQVksQ0FBQyxVQUFVO1lBQ3hCLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xELEtBQUssQ0FBQztRQUNWO1lBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFoQmUsMEJBQWtCLHFCQWdCakMsQ0FBQSIsImZpbGUiOiJtb2RlbC9kb21HZW5lcmF0b3IuanMiLCJzb3VyY2VSb290Ijoic3JjLyJ9
