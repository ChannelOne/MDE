"use strict";
const model_1 = require("../model");
const assert = require("assert");
const testText1 = `# Title

paragraph 1
something else

- first line
- second line
- third line`;
const multilinesText = `multilinesText
total 3 lines
last line.`;
let testLines1 = testText1.split("\n");
assert.equal(testLines1.length, 8);
console.log("Intialize testing...");
(() => {
    let tm1 = new model_1.TextModel(testText1);
    assert(tm1.linesCount === 8);
    tm1.forEach((line) => {
        let lineText = testLines1[line.number - 1];
        if (line.number != tm1.linesCount)
            lineText += "\n";
        assert(lineText == line.text, "The line " + line.number + '"' + lineText + '" should equal to ' +
            '"' + line.text + '"');
        ;
    });
})();
console.log("Testing Position & CharAt API");
(() => {
    let tm1 = new model_1.TextModel(testText1);
    for (let i = 0; i < testText1.length; i++) {
        assert.equal(tm1.charAt(tm1.positionAt(i)), testText1.charAt(i));
        assert.equal(tm1.offsetAt(tm1.positionAt(i)), i);
    }
})();
console.log("Report testing...");
(() => {
    let tm1 = new model_1.TextModel(testText1);
    let reportText = tm1.reportAll();
    assert(testText1 == reportText, "Report all should equal to the source");
    let firstLine = tm1.report({
        begin: {
            line: 1,
            offset: 0,
        },
        end: {
            line: 1,
            offset: 7,
        },
    });
    assert(tm1.lineAt(1).text == firstLine + '\n');
    let thatLines = tm1.report({
        begin: {
            line: 1,
            offset: 0,
        },
        end: {
            line: 3,
            offset: 1,
        }
    });
    assert("# Title\n\np");
})();
console.log("Inserting testing...");
(() => {
    function insertTextToModel(model, pos, text) {
        model.applyTextEdit(new model_1.TextEdit(model_1.TextEditType.InsertText, pos, text));
    }
    let tm1 = new model_1.TextModel(testText1);
    insertTextToModel(tm1, { line: 1, offset: 0 }, "(insert)");
    assert(tm1.lineAt(1).text == "(insert)# Title\n");
    insertTextToModel(tm1, { line: 1, offset: 15 }, "(insert)");
    assert(tm1.lineAt(1).text == "(insert)# Title(insert)\n");
    tm1 = new model_1.TextModel(testText1);
    assert.throws(() => {
        insertTextToModel(tm1, { line: 0, offset: 0 }, "(insert)");
    }, Error);
    assert.throws(() => {
        insertTextToModel(tm1, { line: tm1.linesCount + 1, offset: 0 }, "insert");
    }, Error);
    assert.throws(() => {
        insertTextToModel(tm1, { line: 0, offset: tm1.lineAt(1).length }, "insert");
    }, Error);
    tm1 = new model_1.TextModel(testText1);
    insertTextToModel(tm1, { line: 4, offset: 9 }, "\n");
    assert(tm1.linesCount === 9);
    assert(tm1.lineAt(4).text == "something\n");
    assert(tm1.lineAt(5).text == " else\n");
    assert(tm1.lineAt(6).text == "\n");
    assert(tm1.lineAt(7).text == "- first line\n");
    assert(tm1.lineAt(8).text == "- second line\n");
    assert(tm1.lineAt(9).text == "- third line");
    tm1 = new model_1.TextModel(testText1);
    insertTextToModel(tm1, { line: 4, offset: 9 }, multilinesText);
    assert(tm1.linesCount === 10);
    assert(tm1.lineAt(4).text == "somethingmultilinesText\n");
    assert(tm1.lineAt(5).text == "total 3 lines\n");
    assert(tm1.lineAt(6).text == "last line. else\n");
    tm1 = new model_1.TextModel(testText1);
    insertTextToModel(tm1, tm1.positionAt(testText1.length - 1), "(insert)");
    assert(/(insert)/.test(tm1.lineAt(tm1.linesCount).text));
})();
console.log("Delete text testing...");
(() => {
    function deleteText(model, range) {
        model.applyTextEdit(new model_1.TextEdit(model_1.TextEditType.DeleteText, range));
    }
    let tm1 = new model_1.TextModel(testText1);
    deleteText(tm1, {
        begin: { line: 4, offset: 4 },
        end: { line: 4, offset: 9 }
    });
    assert(tm1.lineAt(4).text == "some else\n");
})();
(() => {
    function deleteText(model, range) {
        model.applyTextEdit(new model_1.TextEdit(model_1.TextEditType.DeleteText, range));
    }
    let tm1 = new model_1.TextModel(testText1);
    deleteText(tm1, {
        begin: { line: 1, offset: 1 },
        end: { line: 4, offset: 4 }
    });
    assert(tm1.lineAt(1).text == "#thing else\n", tm1.lineAt(1).text);
    assert(tm1.lineAt(2).text == "\n", tm1.lineAt(2).text);
    assert(tm1.lineAt(3).text == "- first line\n", tm1.lineAt(3).text);
})();
console.log("All test done.");

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0L3RleHRNb2RlbFRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHdCQUE0RSxVQUM1RSxDQUFDLENBRHFGO0FBQ3RGLE1BQU8sTUFBTSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBR2xDLE1BQU0sU0FBUyxHQUNmOzs7Ozs7O2FBT2EsQ0FBQTtBQUViLE1BQU0sY0FBYyxHQUNwQjs7V0FFVyxDQUFBO0FBRVgsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFHbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7SUFDRyxJQUFJLEdBQUcsR0FBRyxJQUFJLGlCQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFN0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQWU7UUFDeEIsSUFBSSxRQUFRLEdBQVksVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQzlCLFFBQVEsSUFBSSxJQUFJLENBQUM7UUFDckIsTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUN4QixXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsUUFBUSxHQUFHLG9CQUFvQjtZQUNqRSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUFBLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRUwsT0FBTyxDQUFD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LENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxlQUFlLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3RleHRNb2RlbFRlc3QuanMiLCJzb3VyY2VSb290Ijoic3JjLyJ9
