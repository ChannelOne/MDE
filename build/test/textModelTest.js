"use strict";
const model_1 = require("../model");
const assert = require("assert");
const testText1 = `# Title

paragraph 1
something else

- first line
- second line
- third line`;
const multilinesText = `multilinesText
total 3 lines
last line.`;
let testLines1 = testText1.split("\n");
assert.equal(testLines1.length, 8);
console.log("Intialize testing...");
(() => {
    let tm1 = new model_1.TextModel(testText1);
    assert(tm1.linesCount === 8);
    tm1.forEach((line) => {
        let lineText = testLines1[line.number - 1];
        if (line.number != tm1.linesCount)
            lineText += "\n";
        assert(lineText == line.text, "The line " + line.number + '"' + lineText + '" should equal to ' +
            '"' + line.text + '"');
        ;
    });
})();
console.log("Testing Position & CharAt API");
(() => {
    let tm1 = new model_1.TextModel(testText1);
    for (let i = 0; i < testText1.length; i++) {
        assert.equal(tm1.charAt(tm1.positionAt(i)), testText1.charAt(i));
        assert.equal(tm1.offsetAt(tm1.positionAt(i)), i);
    }
})();
console.log("Report testing...");
(() => {
    let tm1 = new model_1.TextModel(testText1);
    let reportText = tm1.reportAll();
    assert(testText1 == reportText, "Report all should equal to the source");
    let firstLine = tm1.report({
        begin: {
            line: 1,
            offset: 0,
        },
        end: {
            line: 1,
            offset: 7,
        },
    });
    assert(tm1.lineAt(1).text == firstLine + '\n');
    let thatLines = tm1.report({
        begin: {
            line: 1,
            offset: 0,
        },
        end: {
            line: 3,
            offset: 1,
        }
    });
    assert("# Title\n\np");
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0L3RleHRNb2RlbFRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHdCQUFtQyxVQUNuQyxDQUFDLENBRDRDO0FBQzdDLE1BQU8sTUFBTSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBR2xDLE1BQU0sU0FBUyxHQUNmOzs7Ozs7O2FBT2EsQ0FBQTtBQUViLE1BQU0sY0FBYyxHQUNwQjs7V0FFVyxDQUFBO0FBRVgsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFHbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7SUFDRyxJQUFJLEdBQUcsR0FBRyxJQUFJLGlCQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFN0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQWU7UUFDeEIsSUFBSSxRQUFRLEdBQVksVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQzlCLFFBQVEsSUFBSSxJQUFJLENBQUM7UUFDckIsTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUN4QixXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsUUFBUSxHQUFHLG9CQUFvQjtZQUNqRSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUFBLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRUwsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBQzdDLENBQUM7SUFFRyxJQUFJLEdBQUcsR0FBRyxJQUFJLGlCQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFbkMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakUsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0FBRUwsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNqQyxDQUFDO0lBRUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxpQkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNqQyxNQUFNLENBQUMsU0FBUyxJQUFJLFVBQVUsRUFDOUIsdUNBQXVDLENBQUMsQ0FBQztJQUV6QyxJQUFJLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLEtBQUssRUFBRTtZQUNILElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxFQUFFLENBQUM7U0FDWjtRQUNELEdBQUcsRUFBRTtZQUNELElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxFQUFFLENBQUM7U0FDWjtLQUNKLENBQUMsQ0FBQTtJQUNGLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFL0MsSUFBSSxTQUFTLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN2QixLQUFLLEVBQUU7WUFDSCxJQUFJLEVBQUUsQ0FBQztZQUNQLE1BQU0sRUFBRSxDQUFDO1NBQ1o7UUFDRCxHQUFHLEVBQUU7WUFDRCxJQUFJLEVBQUMsQ0FBQztZQUNOLE1BQU0sRUFBRSxDQUFDO1NBQ1o7S0FDSixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFM0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsImZpbGUiOiJ0ZXN0L3RleHRNb2RlbFRlc3QuanMiLCJzb3VyY2VSb290Ijoic3JjLyJ9
